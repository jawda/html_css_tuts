{"ast":null,"code":"var _jsxFileName = \"C:\\\\Git\\\\html_css_tuts\\\\react-magic-memory\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport './App.css';\nimport SingleCard from './components/SingleCard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst cardImages = [{\n  \"src\": \"/img/helmet-1.png\"\n}, {\n  \"src\": \"/img/potion-1.png\"\n}, {\n  \"src\": \"/img/ring-1.png\"\n}, {\n  \"src\": \"/img/scroll-1.png\"\n}, {\n  \"src\": \"/img/shield-1.png\"\n}, {\n  \"src\": \"/img/sword-1.png\"\n}];\n\nfunction App() {\n  _s();\n\n  const [cards, setCards] = useState([]);\n  const [turns, setTurns] = useState(0);\n  const [choiceOne, setChoiceOne] = useState(null);\n  const [choiceTwo, setChoiceTwo] = useState(null); //shuffle cards and add a duplicate to match\n\n  const shuffleCards = () => {\n    const shuffledCards = [...cardImages, ...cardImages].sort(() => Math.random() - 0.5).map(card => ({ ...card,\n      id: Math.random()\n    }));\n    setCards(shuffledCards);\n    setTurns(0); //reset turns at start of game\n  }; //handle a choice if choice one has been chosen set choice 2 otherwise set it\n\n\n  const handleChoice = card => {\n    choiceOne ? setChoiceTwo(card) : setChoiceOne(card);\n  }; //compare 2 selected cards\n\n\n  useEffect(() => {\n    if (choiceOne && choiceTwo) {\n      if (choiceOne.src === choiceTwo.src) {\n        console.log(\"those cards match\");\n        resetTurn();\n      } else {\n        console.log(\"those cards do not match\");\n        resetTurn();\n      }\n    }\n  }, [choiceOne, choiceTwo]); //reset choices & increase turn\n\n  const resetTurn = () => {\n    setChoiceOne(null);\n    setChoiceTwo(null);\n    setTurns(prevTurns => prevTurns + 1);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Magic Match\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: shuffleCards,\n      children: \"New Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-grid\",\n      children: cards.map(card => /*#__PURE__*/_jsxDEV(SingleCard, {\n        card: card,\n        handleChoice: handleChoice\n      }, card.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"/JnteANCPxCZNpFpO1ZAWIjzFcc=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useEffect","useState","SingleCard","cardImages","App","cards","setCards","turns","setTurns","choiceOne","setChoiceOne","choiceTwo","setChoiceTwo","shuffleCards","shuffledCards","sort","Math","random","map","card","id","handleChoice","src","console","log","resetTurn","prevTurns"],"sources":["C:/Git/html_css_tuts/react-magic-memory/src/App.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport './App.css';\nimport SingleCard from './components/SingleCard';\n\nconst cardImages = [\n  { \"src\": \"/img/helmet-1.png\"},\n  { \"src\": \"/img/potion-1.png\"},\n  { \"src\": \"/img/ring-1.png\"},\n  { \"src\": \"/img/scroll-1.png\"},\n  { \"src\": \"/img/shield-1.png\"},\n  { \"src\": \"/img/sword-1.png\"}\n]\n\nfunction App() {\n  const [cards, setCards] = useState([])\n  const [turns, setTurns] = useState(0)\n  const [choiceOne, setChoiceOne] = useState(null)\n  const [choiceTwo, setChoiceTwo] = useState(null)\n\n\n  //shuffle cards and add a duplicate to match\n  const shuffleCards = () => {\n    const shuffledCards = [...cardImages, ...cardImages]\n      .sort(() => Math.random() - 0.5)\n      .map((card) => ({ ...card, id: Math.random() }))\n\n      setCards(shuffledCards)\n      setTurns(0)//reset turns at start of game\n  }\n\n\n  //handle a choice if choice one has been chosen set choice 2 otherwise set it\n  const handleChoice = (card) => {\n    choiceOne ? setChoiceTwo(card) : setChoiceOne(card)\n  }\n\n  //compare 2 selected cards\n  useEffect(() => {\n    if (choiceOne && choiceTwo) {\n      if(choiceOne.src === choiceTwo.src) {\n        console.log(\"those cards match\")\n        resetTurn()\n      } else {\n        console.log(\"those cards do not match\")\n        resetTurn()\n      }\n      \n    }\n  }, [choiceOne, choiceTwo])\n\n  //reset choices & increase turn\n  const resetTurn = () => {\n    setChoiceOne(null)\n    setChoiceTwo(null)\n    setTurns(prevTurns => prevTurns + 1)\n  } \n\n  return (\n    <div className=\"App\">\n      <h1>Magic Match</h1>\n      <button onClick={shuffleCards}>New Game</button>\n\n      <div className=\"card-grid\">\n        {cards.map(card => (\n          <SingleCard \n            key={card.id} \n            card={card}\n            handleChoice={handleChoice}\n          />\n        ))}\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAO,WAAP;AACA,OAAOC,UAAP,MAAuB,yBAAvB;;AAEA,MAAMC,UAAU,GAAG,CACjB;EAAE,OAAO;AAAT,CADiB,EAEjB;EAAE,OAAO;AAAT,CAFiB,EAGjB;EAAE,OAAO;AAAT,CAHiB,EAIjB;EAAE,OAAO;AAAT,CAJiB,EAKjB;EAAE,OAAO;AAAT,CALiB,EAMjB;EAAE,OAAO;AAAT,CANiB,CAAnB;;AASA,SAASC,GAAT,GAAe;EAAA;;EACb,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,CAAC,EAAD,CAAlC;EACA,MAAM,CAACM,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,CAAD,CAAlC;EACA,MAAM,CAACQ,SAAD,EAAYC,YAAZ,IAA4BT,QAAQ,CAAC,IAAD,CAA1C;EACA,MAAM,CAACU,SAAD,EAAYC,YAAZ,IAA4BX,QAAQ,CAAC,IAAD,CAA1C,CAJa,CAOb;;EACA,MAAMY,YAAY,GAAG,MAAM;IACzB,MAAMC,aAAa,GAAG,CAAC,GAAGX,UAAJ,EAAgB,GAAGA,UAAnB,EACnBY,IADmB,CACd,MAAMC,IAAI,CAACC,MAAL,KAAgB,GADR,EAEnBC,GAFmB,CAEdC,IAAD,KAAW,EAAE,GAAGA,IAAL;MAAWC,EAAE,EAAEJ,IAAI,CAACC,MAAL;IAAf,CAAX,CAFe,CAAtB;IAIEX,QAAQ,CAACQ,aAAD,CAAR;IACAN,QAAQ,CAAC,CAAD,CAAR,CANuB,CAMZ;EACd,CAPD,CARa,CAkBb;;;EACA,MAAMa,YAAY,GAAIF,IAAD,IAAU;IAC7BV,SAAS,GAAGG,YAAY,CAACO,IAAD,CAAf,GAAwBT,YAAY,CAACS,IAAD,CAA7C;EACD,CAFD,CAnBa,CAuBb;;;EACAnB,SAAS,CAAC,MAAM;IACd,IAAIS,SAAS,IAAIE,SAAjB,EAA4B;MAC1B,IAAGF,SAAS,CAACa,GAAV,KAAkBX,SAAS,CAACW,GAA/B,EAAoC;QAClCC,OAAO,CAACC,GAAR,CAAY,mBAAZ;QACAC,SAAS;MACV,CAHD,MAGO;QACLF,OAAO,CAACC,GAAR,CAAY,0BAAZ;QACAC,SAAS;MACV;IAEF;EACF,CAXQ,EAWN,CAAChB,SAAD,EAAYE,SAAZ,CAXM,CAAT,CAxBa,CAqCb;;EACA,MAAMc,SAAS,GAAG,MAAM;IACtBf,YAAY,CAAC,IAAD,CAAZ;IACAE,YAAY,CAAC,IAAD,CAAZ;IACAJ,QAAQ,CAACkB,SAAS,IAAIA,SAAS,GAAG,CAA1B,CAAR;EACD,CAJD;;EAMA,oBACE;IAAK,SAAS,EAAC,KAAf;IAAA,wBACE;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QADF,eAEE;MAAQ,OAAO,EAAEb,YAAjB;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAFF,eAIE;MAAK,SAAS,EAAC,WAAf;MAAA,UACGR,KAAK,CAACa,GAAN,CAAUC,IAAI,iBACb,QAAC,UAAD;QAEE,IAAI,EAAEA,IAFR;QAGE,YAAY,EAAEE;MAHhB,GACOF,IAAI,CAACC,EADZ;QAAA;QAAA;QAAA;MAAA,QADD;IADH;MAAA;MAAA;MAAA;IAAA,QAJF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAiBD;;GA7DQhB,G;;KAAAA,G;AA+DT,eAAeA,GAAf"},"metadata":{},"sourceType":"module"}