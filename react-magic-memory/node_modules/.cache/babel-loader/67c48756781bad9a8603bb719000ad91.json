{"ast":null,"code":"var _jsxFileName = \"C:\\\\Git\\\\html_css_tuts\\\\react-magic-memory\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport './App.css';\nimport SingleCard from './components/SingleCard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst cardImages = [{\n  \"src\": \"/img/helmet-1.png\",\n  matched: false\n}, {\n  \"src\": \"/img/potion-1.png\",\n  matched: false\n}, {\n  \"src\": \"/img/ring-1.png\",\n  matched: false\n}, {\n  \"src\": \"/img/scroll-1.png\",\n  matched: false\n}, {\n  \"src\": \"/img/shield-1.png\",\n  matched: false\n}, {\n  \"src\": \"/img/sword-1.png\",\n  matched: false\n}];\n\nfunction App() {\n  _s();\n\n  const [cards, setCards] = useState([]);\n  const [turns, setTurns] = useState(0);\n  const [choiceOne, setChoiceOne] = useState(null);\n  const [choiceTwo, setChoiceTwo] = useState(null); //shuffle cards and add a duplicate to match\n\n  const shuffleCards = () => {\n    const shuffledCards = [...cardImages, ...cardImages].sort(() => Math.random() - 0.5).map(card => ({ ...card,\n      id: Math.random()\n    }));\n    setCards(shuffledCards);\n    setTurns(0); //reset turns at start of game\n  }; //handle a choice if choice one has been chosen set choice 2 otherwise set it\n\n\n  const handleChoice = card => {\n    choiceOne ? setChoiceTwo(card) : setChoiceOne(card);\n  }; //compare 2 selected cards updated matched property\n\n\n  useEffect(() => {\n    if (choiceOne && choiceTwo) {\n      if (choiceOne.src === choiceTwo.src) {\n        setCards(prevCards => {\n          return prevCards.map(card => {\n            if (card.src === choiceOne.src) {\n              return { ...card,\n                matched: true\n              };\n            } else {\n              return card;\n            }\n          });\n        });\n        resetTurn();\n      } else {\n        resetTurn();\n      }\n    }\n  }, [choiceOne, choiceTwo]);\n  console.log(cards); //reset choices & increase turn\n\n  const resetTurn = () => {\n    setChoiceOne(null);\n    setChoiceTwo(null);\n    setTurns(prevTurns => prevTurns + 1);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Magic Match\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: shuffleCards,\n      children: \"New Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-grid\",\n      children: cards.map(card => /*#__PURE__*/_jsxDEV(SingleCard, {\n        card: card,\n        handleChoice: handleChoice\n      }, card.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"/JnteANCPxCZNpFpO1ZAWIjzFcc=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useEffect","useState","SingleCard","cardImages","matched","App","cards","setCards","turns","setTurns","choiceOne","setChoiceOne","choiceTwo","setChoiceTwo","shuffleCards","shuffledCards","sort","Math","random","map","card","id","handleChoice","src","prevCards","resetTurn","console","log","prevTurns"],"sources":["C:/Git/html_css_tuts/react-magic-memory/src/App.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport './App.css';\nimport SingleCard from './components/SingleCard';\n\nconst cardImages = [\n  { \"src\": \"/img/helmet-1.png\" , matched: false},\n  { \"src\": \"/img/potion-1.png\", matched: false},\n  { \"src\": \"/img/ring-1.png\", matched: false},\n  { \"src\": \"/img/scroll-1.png\", matched: false},\n  { \"src\": \"/img/shield-1.png\", matched: false},\n  { \"src\": \"/img/sword-1.png\", matched: false}\n]\n\nfunction App() {\n  const [cards, setCards] = useState([])\n  const [turns, setTurns] = useState(0)\n  const [choiceOne, setChoiceOne] = useState(null)\n  const [choiceTwo, setChoiceTwo] = useState(null)\n\n\n  //shuffle cards and add a duplicate to match\n  const shuffleCards = () => {\n    const shuffledCards = [...cardImages, ...cardImages]\n      .sort(() => Math.random() - 0.5)\n      .map((card) => ({ ...card, id: Math.random() }))\n\n      setCards(shuffledCards)\n      setTurns(0)//reset turns at start of game\n  }\n\n\n  //handle a choice if choice one has been chosen set choice 2 otherwise set it\n  const handleChoice = (card) => {\n    choiceOne ? setChoiceTwo(card) : setChoiceOne(card)\n  }\n\n  //compare 2 selected cards updated matched property\n  useEffect(() => {\n    if (choiceOne && choiceTwo) {\n      if(choiceOne.src === choiceTwo.src) {\n        setCards(prevCards => {\n          return prevCards.map(card => {\n            if (card.src === choiceOne.src){\n              return {...card, matched: true}\n            }else {\n              return card\n            }\n\n          })\n        })\n        resetTurn()\n      } else {\n        \n        resetTurn()\n      }\n      \n    }\n  }, [choiceOne, choiceTwo])\n\n  console.log(cards)\n\n  //reset choices & increase turn\n  const resetTurn = () => {\n    setChoiceOne(null)\n    setChoiceTwo(null)\n    setTurns(prevTurns => prevTurns + 1)\n  } \n\n  return (\n    <div className=\"App\">\n      <h1>Magic Match</h1>\n      <button onClick={shuffleCards}>New Game</button>\n\n      <div className=\"card-grid\">\n        {cards.map(card => (\n          <SingleCard \n            key={card.id} \n            card={card}\n            handleChoice={handleChoice}\n          />\n        ))}\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}